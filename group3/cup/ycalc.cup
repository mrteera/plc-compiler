package src;
import java_cup.runtime.*;

parser code {:
    public static void print_error(String message) {
        System.out.println();
        System.out.println("Error: " + message);
        System.exit(0);
    }

    public static void terminate(Variable val) {
        System.out.println();
        System.out.print("Program terminated successfully");
        System.exit(0);
    }
:}


terminal           SEMI, COMMA, PLUS, MINUS, TIMES, DIVIDE, DOUBLEPLUS, DOUBLEMINUS, LPAREN, RPAREN, EQ, DEFINE, AS;
terminal           IF, THEN, PRINT, PRINTLINE, WHILE, FOR, DO, BEGIN,  END, TYPE, ASG, LCB, RCB;
terminal           LT, LE, GT, GE, NE, AND, OR, NOT, MT, FUNCTION;
terminal Integer   NUMBER;
terminal String    ID;
terminal Double    FLOAT;
terminal Boolean   BOOLVALUE; 

non terminal Object             program;
non terminal Astat              statement, assignment, ifthen, print, while, statement_part, vardec, assign, for, function_define, function_call;
non terminal Lstat              statement_list, id_list;
non terminal Aexp               expr, compare, pm, term, factor;

program         ::= statement_list:s
                    {: s.execute(); :};

statement_list  ::= statement_list:l statement_part:s
                    {: RESULT = new Lstat(l,s) ; :}
                |   statement_part:s
                    {: RESULT = new Lstat(s); :}
                ;

statement_part  ::= statement:s
                    {: RESULT = s; :}
                SEMI;

statement       ::= assignment:s
                    {: RESULT = s; :}
                | vardec:s
                  {: RESULT = s; :} 
                | ifthen:s
                    {: RESULT = s; :}
                | print:s
                    {: RESULT = s; :}
                | while:s
                    {: RESULT = s; :}
                | for:s
                    {: RESULT = s; :}
                | LCB statement_list:s RCB
                    {: RESULT = Astat.block(s); :}
                | function_define:s
                    {: RESULT = s; :}
                | function_call:s 
                    {: RESULT = s; :}
                ;

vardec          ::= DEFINE:d id_list:idl AS TYPE:t
                {: RESULT = Astat.varDec((int)t, idl); :}
                ;

id_list         ::= ID:id COMMA id_list:idl
                {:    RESULT = new Lstat(idl, Astat.oneVarDec(id)); :}
                | assignment:assign COMMA id_list:idl
                {:    RESULT = new Lstat(idl, assign); :}
                | assignment:assign
                {:    RESULT = new Lstat(assign); :}
                | ID:id
                {:    RESULT = new Lstat(Astat.oneVarDec(id)); :}
                ;

while           ::= WHILE LPAREN expr:e RPAREN statement:s
                    {: RESULT = Astat.whileloop(e,s); :}
                ;

for             ::= FOR LPAREN vardec:v SEMI compare:c SEMI assignment:a RPAREN statement:s
                    {: RESULT = Astat.forloop(v,c,a,s); :}
                ;

print           ::= PRINT expr:e
                    {: RESULT = Astat.print(e); :}
                | PRINTLINE
                    {: RESULT = Astat.printline(); :}
                ;

function_define ::= DEFINE id_list:i AS FUNCTION LPAREN RPAREN statement:s
                    {: RESULT = Astat.functionDefine(i, null, s); :}
                ;

function_call   ::= ID:i LPAREN RPAREN
                    {: RESULT = Astat.functionCall(i, null); :}
                ;

ifthen          ::= IF expr:e THEN statement:s
                    {: RESULT = Astat.ifthen(e,s); :}
                ;


assignment      ::= ID:i ASG expr:e
                    {: RESULT = Astat.assignment(i,e); :}
                ;

expr            ::= compare:c
                    {: RESULT = c; :}
                | function_call:s
                    {: RESULT = new Aexp(s); :};

compare         ::= compare:c1 EQ pm:p1 
                    {: RESULT = new Aexp(new Args(c1, p1), sym.EQ); :}
                | compare:c1 NE pm:p1 
                    {: RESULT = new Aexp(new Args(c1, p1), sym.NE); :}
                | compare:c1 LT pm:p1 
                    {: RESULT = new Aexp(new Args(c1, p1), sym.LT); :}
                | compare:c1 LE pm:p1 
                    {: RESULT = new Aexp(new Args(c1, p1), sym.LE); :}
                | compare:c1 GT pm:p1 
                    {: RESULT = new Aexp(new Args(c1, p1), sym.GT); :}
                | compare:c1 GE pm:p1 
                    {: RESULT = new Aexp(new Args(c1, p1), sym.GE); :}
                | compare:c1 AND pm:p1 
                    {: RESULT = new Aexp(new Args(c1, p1), sym.AND); :}
                | compare:c1 OR pm:p1 
                    {: RESULT = new Aexp(new Args(c1, p1), sym.OR); :}
                | NOT LPAREN compare:c1 RPAREN
                    {: RESULT = new Aexp(new Args(c1, null), sym.NOT); :}
                | pm:p
                    {: RESULT = p; :};

pm              ::= pm:p PLUS term:t
                    {: RESULT = new Aexp(new Args(p,t), sym.PLUS); :}
                | pm:p MINUS term:t
                    {: RESULT = new Aexp(new Args(p,t), sym.MINUS); :}
                | term:t
                    {: RESULT = t; :};

term            ::= term:t TIMES factor:f
                    {: RESULT = new Aexp(new Args(t,f), sym.TIMES); :}
                | term:t DIVIDE factor:f
                    {: RESULT = new Aexp(new Args(t,f), sym.DIVIDE); :}
                | factor:f
                    {: RESULT = f; :};

factor          ::= LPAREN expr:e RPAREN
                    {: RESULT = e; :}
                | NUMBER:n
                    {: RESULT = new Aexp(n); :}
                | FLOAT:f
                    {: RESULT = new Aexp(f); :}
                | BOOLVALUE: boolvalue
                    {: RESULT = new Aexp(boolvalue);  :}
                | ID:i
                    {: RESULT = new Aexp(i); :};
