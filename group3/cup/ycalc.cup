package src;
import java_cup.runtime.*;

parser code {:
    public static void print_error(String message) {
        System.out.println();
        System.out.println("Error: " + message);
        System.exit(0);
    }

    public static void terminate(Variable val) {
        System.out.println();
        System.out.print("Program terminated successfully");
        System.exit(0);
    }
:}


terminal           SEMI, COMMA, PLUS, MINUS, TIMES, DIVIDE, DOUBLEPLUS, DOUBLEMINUS, LPAREN, RPAREN, EQ, DEFINE, AS,
                   IF, THEN, PRINT, PRINTLINE, WHILE, FOR, DO, BEGIN,  END, TYPE, ASG, LCB, RCB,
                   LT, LE, GT, GE, NE, MT, FUNCTION;
terminal Integer   NUMBER;
terminal String    ID;
terminal Double    FLOAT;
terminal Boolean   BOOLVALUE; 

non terminal Object             program;
non terminal Astat              statement, assignment, ifthen, print, while, statement_part, vardec, function_define, function_call;
non terminal Lstat              statement_list;
non terminal Aexp               expr, factor, term;

program         ::= statement_list:s
                    {: s.execute(); :};

statement_list  ::= statement_list:l statement_part:s
                    {: RESULT = new Lstat(l,s) ; :}
                |   statement_part:s
                    {: RESULT = new Lstat(s); :}
                ;

statement_part  ::= statement:s
                    {: RESULT = s; :}
                SEMI;

statement       ::= assignment:s
                    {: RESULT = s; :}
                | vardec:s
                  {: RESULT = s; :} 
                | ifthen:s
                    {: RESULT = s; :}
                | print:s
                    {: RESULT = s; :}
                | while:s
                    {: RESULT = s; :}
                | LCB statement_list:s RCB
                    {: RESULT = Astat.block(s); :}
                | function_define:s
                    {: RESULT = s; :}
                | function_call:s 
                    {: RESULT = s; :}
                ;

vardec          ::= DEFINE:d ID:i AS:a TYPE:t
                {: RESULT = Astat.varDec((int)t, i); :}
                ;
while           ::= WHILE LPAREN expr:e RPAREN LCB statement:s RCB
                    {: RESULT = Astat.whileloop(e,s); :}
                ;

print           ::= PRINT expr:e
                    {: RESULT = Astat.print(e); :}
                ;

function_define ::= DEFINE ID:i AS:a FUNCTION:f LPAREN RPAREN statement:s
                    {: RESULT = Astat.functionDefine(i, null, s); :}
                ;

function_call   ::= ID:i LPAREN RPAREN
                    {: RESULT = Astat.functionCall(i, null); :}
                ;

ifthen          ::= IF expr:e THEN statement:s
                    {: RESULT = Astat.ifthen(e,s); :}
                ;


assignment      ::= ID:i ASG expr:e
                    {: RESULT = Astat.assignment(i,e); :}
                ;

expr            ::= expr:e PLUS term:t
                    {: RESULT = new Aexp(new Args(e,t), sym.PLUS); :}
                | expr:e MINUS term:t
                    {: RESULT = new Aexp(new Args(e,t), sym.MINUS); :}
                | function_call:s
                    {: RESULT = new Aexp(s); :}
                | term:t
                    {: RESULT = t; :};

term            ::= term:t TIMES factor:f
                    {: RESULT = new Aexp(new Args(t,f), sym.TIMES); :}
                | term:t DIVIDE factor:f
                    {: RESULT = new Aexp(new Args(t,f), sym.DIVIDE); :}
                | factor:f
                    {: RESULT = f; :};

factor          ::= LPAREN expr:e RPAREN
                    {: RESULT = e; :}
                | NUMBER:n
                    {: RESULT = new Aexp(n); :}
                | FLOAT:f
                    {: RESULT = new Aexp(f); :}
                | BOOLVALUE: boolvalue
                    {: RESULT = new Aexp(boolvalue);  :}
                | ID:i
                    {: RESULT = new Aexp(i); :};
